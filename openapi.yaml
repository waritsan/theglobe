openapi: 3.0.0
info:
  description: The Globe API
  version: 3.0.0
  title: The Globe API
  contact:
    email: waritsan@gmail.com

components:
  schemas:
    Category:
      type: object
      required:
        - name
        - slug
      description: A content category for organizing blog posts
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        slug:
          type: string
          description: URL-friendly identifier
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
    BlogPost:
      type: object
      required:
        - title
        - content
        - author
        - slug
      description: A blog post or article
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        excerpt:
          type: string
        author:
          type: string
        categoryId:
          type: string
        tags:
          type: array
          items:
            type: string
        slug:
          type: string
          description: URL-friendly identifier
        published:
          type: boolean
        publishedDate:
          type: string
          format: date-time
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        imageUrl:
          type: string
          description: Featured image URL
    Comment:
      type: object
      required:
        - postId
        - author
        - content
      description: A comment on a blog post
      properties:
        id:
          type: string
        postId:
          type: string
        author:
          type: string
        email:
          type: string
        content:
          type: string
        approved:
          type: boolean
        createdDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
  parameters:
    categoryId:
      in: path
      required: true
      name: categoryId
      description: The category unique identifier
      schema:
        type: string
    postId:
      in: path
      required: true
      name: postId
      description: The blog post unique identifier
      schema:
        type: string
    commentId:
      in: path
      required: true
      name: commentId
      description: The comment unique identifier
      schema:
        type: string
    published:
      in: query
      required: false
      name: published
      description: Filter by published status
      schema:
        type: boolean
    approved:
      in: query
      required: false
      name: approved
      description: Filter by comment approval status
      schema:
        type: boolean
    top:
      in: query
      required: false
      name: top
      description: The max number of items to return in a result
      schema:
        type: number
        default: 20
    skip:
      in: query
      required: false
      name: skip
      description: The number of items to skip within the results
      schema:
        type: number
        default: 0

  requestBodies:
    Category:
      description: The Category
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Category"
    BlogPost:
      description: The Blog Post
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BlogPost"
    Comment:
      description: The Comment
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Comment"

  responses:
    Category:
      description: A Category result
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Category"
    CategoryArray:
      description: An array of Categories
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Category"
    BlogPost:
      description: A Blog post result
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BlogPost"
    BlogPostArray:
      description: An array of Blog posts
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/BlogPost"
    Comment:
      description: A Comment result
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Comment"
    CommentArray:
      description: An array of Comments
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Comment"

paths:
  /categories:
    get:
      operationId: GetCategories
      summary: Gets an array of categories
      tags:
        - Categories
      parameters:
        - $ref: "#/components/parameters/top"
        - $ref: "#/components/parameters/skip"
      responses:
        200:
          $ref: "#/components/responses/CategoryArray"
    post:
      operationId: CreateCategory
      summary: Creates a new category
      tags:
        - Categories
      requestBody:
        $ref: "#/components/requestBodies/Category"
      responses:
        201:
          $ref: "#/components/responses/Category"
        400:
          description: Invalid request schema
  /categories/{categoryId}:
    get:
      operationId: GetCategoryById
      summary: Gets a category by unique identifier
      tags:
        - Categories
      parameters:
        - $ref: "#/components/parameters/categoryId"
      responses:
        200:
          $ref: "#/components/responses/Category"
        404:
          description: Category not found
    put:
      operationId: UpdateCategoryById
      summary: Updates a category by unique identifier
      tags:
        - Categories
      requestBody:
        $ref: "#/components/requestBodies/Category"
      parameters:
        - $ref: "#/components/parameters/categoryId"
      responses:
        200:
          $ref: "#/components/responses/Category"
        404:
          description: Category not found
        400:
          description: Category is invalid
    delete:
      operationId: DeleteCategoryById
      summary: Deletes a category by unique identifier
      tags:
        - Categories
      parameters:
        - $ref: "#/components/parameters/categoryId"
      responses:
        204:
          description: Category deleted successfully
        404:
          description: Category not found
  /posts:
    get:
      operationId: GetPosts
      summary: Gets an array of blog posts
      tags:
        - Posts
      parameters:
        - $ref: "#/components/parameters/published"
        - $ref: "#/components/parameters/top"
        - $ref: "#/components/parameters/skip"
      responses:
        200:
          $ref: "#/components/responses/BlogPostArray"
    post:
      operationId: CreatePost
      summary: Creates a new blog post
      tags:
        - Posts
      requestBody:
        $ref: "#/components/requestBodies/BlogPost"
      responses:
        201:
          $ref: "#/components/responses/BlogPost"
        400:
          description: Invalid request schema
  /posts/{postId}:
    get:
      operationId: GetPostById
      summary: Gets a blog post by unique identifier
      tags:
        - Posts
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        200:
          $ref: "#/components/responses/BlogPost"
        404:
          description: Blog post not found
    put:
      operationId: UpdatePostById
      summary: Updates a blog post by unique identifier
      tags:
        - Posts
      requestBody:
        $ref: "#/components/requestBodies/BlogPost"
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        200:
          $ref: "#/components/responses/BlogPost"
        404:
          description: Blog post not found
        400:
          description: Blog post is invalid
    delete:
      operationId: DeletePostById
      summary: Deletes a blog post by unique identifier
      tags:
        - Posts
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        204:
          description: Blog post deleted successfully
        404:
          description: Blog post not found
  /posts/{postId}/comments:
    get:
      operationId: GetPostComments
      summary: Gets comments for a specific blog post
      tags:
        - Comments
      parameters:
        - $ref: "#/components/parameters/postId"
        - $ref: "#/components/parameters/approved"
        - $ref: "#/components/parameters/top"
        - $ref: "#/components/parameters/skip"
      responses:
        200:
          $ref: "#/components/responses/CommentArray"
        404:
          description: Blog post not found
    post:
      operationId: CreateComment
      summary: Creates a new comment for a blog post
      tags:
        - Comments
      requestBody:
        $ref: "#/components/requestBodies/Comment"
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        201:
          $ref: "#/components/responses/Comment"
        404:
          description: Blog post not found
        400:
          description: Invalid request schema
  /posts/{postId}/comments/{commentId}:
    get:
      operationId: GetCommentById
      summary: Gets a comment by unique identifier
      tags:
        - Comments
      parameters:
        - $ref: "#/components/parameters/postId"
        - $ref: "#/components/parameters/commentId"
      responses:
        200:
          $ref: "#/components/responses/Comment"
        404:
          description: Blog post or comment not found
    put:
      operationId: UpdateCommentById
      summary: Updates a comment by unique identifier
      tags:
        - Comments
      requestBody:
        $ref: "#/components/requestBodies/Comment"
      parameters:
        - $ref: "#/components/parameters/postId"
        - $ref: "#/components/parameters/commentId"
      responses:
        200:
          $ref: "#/components/responses/Comment"
        404:
          description: Blog post or comment not found
        400:
          description: Comment is invalid
    delete:
      operationId: DeleteCommentById
      summary: Deletes a comment by unique identifier
      tags:
        - Comments
      parameters:
        - $ref: "#/components/parameters/postId"
        - $ref: "#/components/parameters/commentId"
      responses:
        204:
          description: Comment deleted successfully
        404:
          description: Blog post or comment not found
